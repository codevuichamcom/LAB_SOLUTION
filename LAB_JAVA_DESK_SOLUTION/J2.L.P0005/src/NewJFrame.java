            
import java.awt.Image;
import java.awt.Label;
import java.awt.Rectangle;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.stage.Screen;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ThinkPro
 */

public class NewJFrame extends javax.swing.JFrame implements Runnable{

    /**
     * Creates new form NewJFrame
     */
    
    
    private int xFrog=200,yFrog=250,widthFrog=30,heightFrog=25;//Kiểm soát tọa độ của cóc
    private static int x1=600,x2=x1+400,x3=x2+400,x4=x3+400;//kiem soat hoành độ
    private static int h1,h2,h3,h4;//kiem soat chieu cao
    
    private JLabel lbFrog = new JLabel("Frog");
    private JButton pipe1Up = new JButton();
    private JButton pipe1Down = new JButton();
    private JButton pipe2Up = new JButton();
    private JButton pipe2Down = new JButton();
    private JButton pipe3Up = new JButton();
    private JButton pipe4Up = new JButton();
    private JButton pipe3Down = new JButton();
    private JButton pipe4Down = new JButton();
    private int score;
    private volatile boolean isRunning;
    private int velocity=1;
    private boolean isSave=false;
    Random rand = new Random();
    Thread thread=null;
    
  void loadFile(String fname) throws IOException {
        RandomAccessFile f = new RandomAccessFile(fname,"r");
        String s; 
        while(true) {
         s = f.readLine();
         if(s==null || s.trim().equals("")) break;
         String []frog = s.split(",");
         xFrog=Integer.parseInt(frog[0]);
         yFrog=Integer.parseInt(frog[1]);
         x1=Integer.parseInt(frog[2]);
         x2=Integer.parseInt(frog[3]);
         x3=Integer.parseInt(frog[4]);
         x4=Integer.parseInt(frog[5]);
         h1=Integer.parseInt(frog[6]);
         h2=Integer.parseInt(frog[7]);
         h3=Integer.parseInt(frog[8]);
         h4=Integer.parseInt(frog[9]);
         score=Integer.parseInt(frog[10]);
         lbScore.setText(score+"");
        }
  f.close();
 }
  void saveFile(String fname) throws IOException {
  
  File f = new File(fname);
  if(f.exists()) f.delete();
  RandomAccessFile g = new RandomAccessFile(fname,"rw");
    g.writeBytes(xFrog+","+yFrog+","+x1+","+x2+","+x3+","+x4+","+h1+","+h2+","+h3+","+h4+","+score+"\r\n");
  g.close();
 }
    public void addPipe(JButton btn1,JButton btn2,int x,int h){
        btn1.setBounds(x, 0, 100, h);
        btn2.setBounds(x, (h+200), 100, 500-(h+200));
        btn1.setVisible(true);
        btn2.setVisible(true);
        paneScreen.add(btn1);
        paneScreen.add(btn2);
    }
    public void initGame(){
        paneScreen.removeAll();
        x1=600;x2=x1+400;x3=x2+400;x4=x3+400;
        lbFrog.setBounds(xFrog, yFrog, widthFrog, heightFrog);
        BufferedImage frogImg=null;
        try {
            frogImg=ImageIO.read(new File("1.png"));
        } catch (IOException ex) {
            Logger.getLogger(Screen.class.getName()).log(Level.SEVERE, null, ex);
        }
        Image tempImg=frogImg.getScaledInstance(lbFrog.getWidth(), lbFrog.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon imageIcon=new ImageIcon(tempImg);
        lbFrog.setIcon(imageIcon);
        
        
        
        paneScreen.add(lbFrog);
        
        paneScreen.setSize(600,500);
        h1=50+rand.nextInt(250);
        addPipe(pipe1Up, pipe1Down, x1, h1);
        h2=50+rand.nextInt(250);
        addPipe(pipe2Up, pipe2Down, x2, h2);
        h3=50+rand.nextInt(250);
        addPipe(pipe3Up, pipe3Down, x3, h3);
        h4=50+rand.nextInt(250);
        addPipe(pipe4Up, pipe4Down, x4, h4);
        lbFrog.setSize(widthFrog,heightFrog);
        score=0;
        lbScore.setText(""+score);
//        isRunning=false;
        if (thread == null) {
            thread = new Thread(this);
            thread.start();
        }
        
        
       
        
    }
    public NewJFrame() {
        
        initComponents();
        setSize(600,570);
        setLocationRelativeTo(null);
        setResizable(false);
        initGame();
         
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnPause = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        paneScreen = new javax.swing.JPanel();
        lbScore = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(500, 500));

        btnPause.setText("start");
        btnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseActionPerformed(evt);
            }
        });

        btnSave.setText("save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel2.setText("ponit:");

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        paneScreen.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 102, 255)));
        paneScreen.setPreferredSize(new java.awt.Dimension(500, 500));
        paneScreen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paneScreenMouseClicked(evt);
            }
        });
        paneScreen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                paneScreenKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout paneScreenLayout = new javax.swing.GroupLayout(paneScreen);
        paneScreen.setLayout(paneScreenLayout);
        paneScreenLayout.setHorizontalGroup(
            paneScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 492, Short.MAX_VALUE)
        );
        paneScreenLayout.setVerticalGroup(
            paneScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 498, Short.MAX_VALUE)
        );

        lbScore.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnPause)
                .addGap(92, 92, 92)
                .addComponent(btnSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbScore)
                .addGap(94, 94, 94)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paneScreen, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(paneScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPause)
                    .addComponent(jLabel2)
                    .addComponent(btnExit)
                    .addComponent(lbScore)
                    .addComponent(btnSave)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void paneScreenKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paneScreenKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_SPACE){
            FrogMoveUp();
        }
        if(evt.getKeyCode()==KeyEvent.VK_S){
            btnSaveActionPerformed(null);
        }
        
    }//GEN-LAST:event_paneScreenKeyPressed

    private void paneScreenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paneScreenMouseClicked
        // TODO add your handling code here:
        FrogMoveUp();
    }//GEN-LAST:event_paneScreenMouseClicked

    private void btnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseActionPerformed
        
        if (btnPause.getText().equalsIgnoreCase("start")) {
            initGame();
            
            if(isSave){
                try {
                    loadFile("location.txt");
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }else{
                xFrog=200;yFrog=250;
            }
            isRunning = true;
            btnPause.setText("pause");
            paneScreen.requestFocus();
        } else if (!isRunning) {
            btnPause.setText("pause");
            isRunning = true;
            paneScreen.requestFocus();
        } else {
            isRunning = false;
            btnPause.setText("continue");
        }
        
        
       
    }//GEN-LAST:event_btnPauseActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        isSave=true;
        if(isRunning){
            try {
            // TODO add your handling code here:
            saveFile("location.txt");
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lbScore;
    private javax.swing.JPanel paneScreen;
    // End of variables declaration//GEN-END:variables

    public void moveFrogOy(){
        this.yFrog+=velocity;
        lbFrog.setLocation(xFrog, yFrog);
    }
   public void FrogMoveDown(){
       if (velocity < 15) {
            velocity++;
        }
       
       this.yFrog+=velocity;
       lbFrog.setLocation(xFrog, yFrog);
   }
   public void FrogMoveUp(){
       if(!isRunning)
           return;
       if (velocity > 0) {
            velocity=0;
        }
        velocity=velocity-10;
       moveFrogOy();
   }
   public void pipeMoveForWard(){
       this.x1-=10;
       this.x2-=10;
       this.x3-=10;
       this.x4-=10;
       if(x1==-1000){
           x1=600;
           h1=50+rand.nextInt(250);
       }
       if(x2==-1000){
           x2=600;
           h2=50+rand.nextInt(250);
       }
       if(x3==-1000){
           x3=600;
           h4=50+rand.nextInt(250);
       }
       if(x4==-1000){
           x4=600;
           h4=50+rand.nextInt(250);
       }
       pipe1Up.setBounds(x1, 0, 100, h1);
       pipe1Down.setBounds(x1, (h1+200), 100, 500-(h1+200));
       pipe2Up.setBounds(x2, 0, 100, h2);
       pipe2Down.setBounds(x2, (h2+200), 100, 500-(h2+200));
       pipe3Up.setBounds(x3, 0, 100, h3);
       pipe3Down.setBounds(x3, (h3+200), 100, 500-(h3+200));
       pipe4Up.setBounds(x4, 0, 100, h4);
       pipe4Down.setBounds(x4, (h4+200), 100, 500-(h4+200));
   }
   
    public boolean checkIntersect(JLabel frog, JButton pipe) {
        Rectangle r1 = new Rectangle(frog.getX(), frog.getY(), frog.getWidth(), frog.getHeight());
        Rectangle r2 = new Rectangle(pipe.getX(), pipe.getY(), pipe.getWidth(), pipe.getHeight());
        return r1.intersects(r2);
    }
   public boolean checkDie(){
       if(lbFrog.getY()>=500||lbFrog.getY()<0){
           return true;
       }
       if(checkIntersect(lbFrog, pipe1Up)){
           return true;
       }
       if(checkIntersect(lbFrog, pipe2Up)){
           return true;
       }
       if(checkIntersect(lbFrog, pipe3Up)){
           return true;
       }
       if(checkIntersect(lbFrog, pipe4Up)){
           return true;
       }
       if(checkIntersect(lbFrog, pipe1Down)){
           return true;
       }
       if(checkIntersect(lbFrog, pipe2Down)){
           return true;
       }
       if(checkIntersect(lbFrog, pipe3Down)){
           return true;
       }
       if(checkIntersect(lbFrog, pipe4Down)){
           return true;
       }
       return false;
   }
   public void checkScore(){
       if(checkDie()==false&&(lbFrog.getX()==pipe1Up.getX()+110||lbFrog.getX()==pipe2Up.getX()+110||lbFrog.getX()==pipe3Up.getX()+110||lbFrog.getX()==pipe4Up.getX()+110)){
           score++;
           lbScore.setText("" + score);
       } 
   }
   private void showGameOver() {
        btnPause.setText("start");
        String medal;
        if (score < 10) {
            medal = "No medal";
        } else if (score < 20) {
            medal = "Bronze medal";
        } else if (score < 30) {
            medal = "Sliver medal";
        } else if (score < 40) {
            medal = "Gold medal";
        } else {
            medal = "Platium medal";
        }
        JOptionPane.showMessageDialog(this,
                "Your score: " + score + "\nYou archived: " + medal,
                "Game Over",
                JOptionPane.INFORMATION_MESSAGE);
        btnPause.requestFocus();
    }

    @Override
    public void run() {
        while(true){
            try {
                if(isRunning){
                    
                    FrogMoveDown();
                    pipeMoveForWard();
                    checkScore();
                    if(checkDie()){
                        isRunning=false;
                        showGameOver();
                    }

                }
                
                Thread.sleep(19);
            } catch (InterruptedException ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
}
